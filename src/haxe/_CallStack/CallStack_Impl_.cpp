// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_NativeStackTrace
#include <haxe/NativeStackTrace.h>
#endif
#ifndef INCLUDED_haxe_StackItem
#include <haxe/StackItem.h>
#endif
#ifndef INCLUDED_haxe__CallStack_CallStack_Impl_
#include <haxe/_CallStack/CallStack_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_b99d1ca1df6dde60_46_get_length,"haxe._CallStack.CallStack_Impl_","get_length",0xe90f0eae,"haxe._CallStack.CallStack_Impl_.get_length","/opt/haxe/std/haxe/CallStack.hx",46,0xe4bc1493)
HX_LOCAL_STACK_FRAME(_hx_pos_b99d1ca1df6dde60_52_callStack,"haxe._CallStack.CallStack_Impl_","callStack",0x30d63cab,"haxe._CallStack.CallStack_Impl_.callStack","/opt/haxe/std/haxe/CallStack.hx",52,0xe4bc1493)
HX_LOCAL_STACK_FRAME(_hx_pos_b99d1ca1df6dde60_62_exceptionStack,"haxe._CallStack.CallStack_Impl_","exceptionStack",0x933cbdf8,"haxe._CallStack.CallStack_Impl_.exceptionStack","/opt/haxe/std/haxe/CallStack.hx",62,0xe4bc1493)
HX_LOCAL_STACK_FRAME(_hx_pos_b99d1ca1df6dde60_70_toString,"haxe._CallStack.CallStack_Impl_","toString",0xaff80ceb,"haxe._CallStack.CallStack_Impl_.toString","/opt/haxe/std/haxe/CallStack.hx",70,0xe4bc1493)
static const ::String _hx_array_data_baffa80f_5[] = {
	HX_("\nCalled from ",bd,26,6b,81),
};
HX_LOCAL_STACK_FRAME(_hx_pos_b99d1ca1df6dde60_83_subtract,"haxe._CallStack.CallStack_Impl_","subtract",0x6f9ab153,"haxe._CallStack.CallStack_Impl_.subtract","/opt/haxe/std/haxe/CallStack.hx",83,0xe4bc1493)
HX_LOCAL_STACK_FRAME(_hx_pos_b99d1ca1df6dde60_107_copy,"haxe._CallStack.CallStack_Impl_","copy",0xbacd2c74,"haxe._CallStack.CallStack_Impl_.copy","/opt/haxe/std/haxe/CallStack.hx",107,0xe4bc1493)
HX_LOCAL_STACK_FRAME(_hx_pos_b99d1ca1df6dde60_111_get,"haxe._CallStack.CallStack_Impl_","get",0xb9acacb7,"haxe._CallStack.CallStack_Impl_.get","/opt/haxe/std/haxe/CallStack.hx",111,0xe4bc1493)
HX_LOCAL_STACK_FRAME(_hx_pos_b99d1ca1df6dde60_115_asArray,"haxe._CallStack.CallStack_Impl_","asArray",0xd786abe8,"haxe._CallStack.CallStack_Impl_.asArray","/opt/haxe/std/haxe/CallStack.hx",115,0xe4bc1493)
HX_LOCAL_STACK_FRAME(_hx_pos_b99d1ca1df6dde60_119_equalItems,"haxe._CallStack.CallStack_Impl_","equalItems",0xbce5e9ab,"haxe._CallStack.CallStack_Impl_.equalItems","/opt/haxe/std/haxe/CallStack.hx",119,0xe4bc1493)
HX_LOCAL_STACK_FRAME(_hx_pos_b99d1ca1df6dde60_134_exceptionToString,"haxe._CallStack.CallStack_Impl_","exceptionToString",0x4a8cc7fc,"haxe._CallStack.CallStack_Impl_.exceptionToString","/opt/haxe/std/haxe/CallStack.hx",134,0xe4bc1493)
HX_LOCAL_STACK_FRAME(_hx_pos_b99d1ca1df6dde60_155_itemToString,"haxe._CallStack.CallStack_Impl_","itemToString",0xddade49e,"haxe._CallStack.CallStack_Impl_.itemToString","/opt/haxe/std/haxe/CallStack.hx",155,0xe4bc1493)
static const ::String _hx_array_data_baffa80f_16[] = {
	HX_("a C function",f4,1b,53,cb),
};
static const ::String _hx_array_data_baffa80f_17[] = {
	HX_("module ",f4,e1,fa,f7),
};
static const ::String _hx_array_data_baffa80f_18[] = {
	HX_(" (",08,1c,00,00),
};
static const ::String _hx_array_data_baffa80f_19[] = {
	HX_(" line ",8c,69,6d,40),
};
static const ::String _hx_array_data_baffa80f_20[] = {
	HX_(" column ",6a,f0,a7,19),
};
static const ::String _hx_array_data_baffa80f_21[] = {
	HX_(")",29,00,00,00),
};
static const ::String _hx_array_data_baffa80f_22[] = {
	HX_(".",2e,00,00,00),
};
static const ::String _hx_array_data_baffa80f_23[] = {
	HX_("local function #",b0,cd,97,ff),
};
namespace haxe{
namespace _CallStack{

void CallStack_Impl__obj::__construct() { }

Dynamic CallStack_Impl__obj::__CreateEmpty() { return new CallStack_Impl__obj; }

void *CallStack_Impl__obj::_hx_vtable = 0;

Dynamic CallStack_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CallStack_Impl__obj > _hx_result = new CallStack_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CallStack_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x29a173d9;
}

int CallStack_Impl__obj::get_length(::Array< ::Dynamic> this1){
            	HX_STACKFRAME(&_hx_pos_b99d1ca1df6dde60_46_get_length)
HXDLIN(  46)		return this1->length;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_Impl__obj,get_length,return )

::Array< ::Dynamic> CallStack_Impl__obj::callStack(){
            	HX_STACKFRAME(&_hx_pos_b99d1ca1df6dde60_52_callStack)
HXDLIN(  52)		return ::haxe::NativeStackTrace_obj::toHaxe(::haxe::NativeStackTrace_obj::callStack(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CallStack_Impl__obj,callStack,return )

::Array< ::Dynamic> CallStack_Impl__obj::exceptionStack(){
            	HX_STACKFRAME(&_hx_pos_b99d1ca1df6dde60_62_exceptionStack)
HXLINE(  63)		::Array< ::Dynamic> eStack = ::haxe::NativeStackTrace_obj::toHaxe(::haxe::NativeStackTrace_obj::exceptionStack(),null());
HXLINE(  64)		return ::haxe::_CallStack::CallStack_Impl__obj::subtract(eStack,::haxe::_CallStack::CallStack_Impl__obj::callStack());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(CallStack_Impl__obj,exceptionStack,return )

::String CallStack_Impl__obj::toString(::Array< ::Dynamic> stack){
            	HX_GC_STACKFRAME(&_hx_pos_b99d1ca1df6dde60_70_toString)
HXLINE(  71)		 ::StringBuf b =  ::StringBuf_obj::__alloc( HX_CTX );
HXLINE(  72)		{
HXLINE(  72)			int _g = 0;
HXDLIN(  72)			::Array< ::Dynamic> _g1 = stack;
HXDLIN(  72)			while((_g < _g1->length)){
HXLINE(  72)				 ::haxe::StackItem s = _g1->__get(_g).StaticCast<  ::haxe::StackItem >();
HXDLIN(  72)				_g = (_g + 1);
HXLINE(  73)				{
HXLINE(  73)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  73)						b->flush();
            					}
HXDLIN(  73)					if (::hx::IsNull( b->b )) {
HXLINE(  73)						b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_5,1);
            					}
            					else {
HXLINE(  73)						b->b->push(HX_("\nCalled from ",bd,26,6b,81));
            					}
            				}
HXLINE(  74)				::haxe::_CallStack::CallStack_Impl__obj::itemToString(b,s);
            			}
            		}
HXLINE(  76)		return b->toString();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_Impl__obj,toString,return )

::Array< ::Dynamic> CallStack_Impl__obj::subtract(::Array< ::Dynamic> this1,::Array< ::Dynamic> stack){
            	HX_STACKFRAME(&_hx_pos_b99d1ca1df6dde60_83_subtract)
HXLINE(  84)		int startIndex = -1;
HXLINE(  85)		int i = -1;
HXLINE(  86)		while(true){
HXLINE(  86)			i = (i + 1);
HXDLIN(  86)			if (!((i < this1->length))) {
HXLINE(  86)				goto _hx_goto_6;
            			}
HXLINE(  87)			{
HXLINE(  87)				int _g = 0;
HXDLIN(  87)				int _g1 = stack->length;
HXDLIN(  87)				while((_g < _g1)){
HXLINE(  87)					_g = (_g + 1);
HXDLIN(  87)					int j = (_g - 1);
HXLINE(  88)					if (::haxe::_CallStack::CallStack_Impl__obj::equalItems(this1->__get(i).StaticCast<  ::haxe::StackItem >(),stack->__get(j).StaticCast<  ::haxe::StackItem >())) {
HXLINE(  89)						if ((startIndex < 0)) {
HXLINE(  90)							startIndex = i;
            						}
HXLINE(  92)						i = (i + 1);
HXLINE(  93)						if ((i >= this1->length)) {
HXLINE(  93)							goto _hx_goto_7;
            						}
            					}
            					else {
HXLINE(  95)						startIndex = -1;
            					}
            				}
            				_hx_goto_7:;
            			}
HXLINE(  98)			if ((startIndex >= 0)) {
HXLINE(  98)				goto _hx_goto_6;
            			}
            		}
            		_hx_goto_6:;
HXLINE( 100)		if ((startIndex >= 0)) {
HXLINE( 100)			return this1->slice(0,startIndex);
            		}
            		else {
HXLINE( 100)			return this1;
            		}
HXDLIN( 100)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CallStack_Impl__obj,subtract,return )

::Array< ::Dynamic> CallStack_Impl__obj::copy(::Array< ::Dynamic> this1){
            	HX_STACKFRAME(&_hx_pos_b99d1ca1df6dde60_107_copy)
HXDLIN( 107)		return this1->copy();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_Impl__obj,copy,return )

 ::haxe::StackItem CallStack_Impl__obj::get(::Array< ::Dynamic> this1,int index){
            	HX_STACKFRAME(&_hx_pos_b99d1ca1df6dde60_111_get)
HXDLIN( 111)		return this1->__get(index).StaticCast<  ::haxe::StackItem >();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CallStack_Impl__obj,get,return )

::Array< ::Dynamic> CallStack_Impl__obj::asArray(::Array< ::Dynamic> this1){
            	HX_STACKFRAME(&_hx_pos_b99d1ca1df6dde60_115_asArray)
HXDLIN( 115)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_Impl__obj,asArray,return )

bool CallStack_Impl__obj::equalItems( ::haxe::StackItem item1, ::haxe::StackItem item2){
            	HX_STACKFRAME(&_hx_pos_b99d1ca1df6dde60_119_equalItems)
HXDLIN( 119)		if (::hx::IsNull( item1 )) {
HXLINE( 120)			if (::hx::IsNull( item2 )) {
HXLINE( 120)				return true;
            			}
            			else {
HXLINE( 130)				return false;
            			}
            		}
            		else {
HXDLIN( 119)			switch((int)(item1->_hx_getIndex())){
            				case (int)0: {
HXDLIN( 119)					if (::hx::IsNull( item2 )) {
HXLINE( 130)						return false;
            					}
            					else {
HXDLIN( 119)						if ((item2->_hx_getIndex() == 0)) {
HXLINE( 121)							return true;
            						}
            						else {
HXLINE( 130)							return false;
            						}
            					}
            				}
            				break;
            				case (int)1: {
HXDLIN( 119)					if (::hx::IsNull( item2 )) {
HXLINE( 130)						return false;
            					}
            					else {
HXDLIN( 119)						if ((item2->_hx_getIndex() == 1)) {
HXLINE( 122)							::String m1 = item1->_hx_getString(0);
HXDLIN( 122)							::String m2 = item2->_hx_getString(0);
HXLINE( 123)							return (m1 == m2);
            						}
            						else {
HXLINE( 130)							return false;
            						}
            					}
            				}
            				break;
            				case (int)2: {
HXDLIN( 119)					if (::hx::IsNull( item2 )) {
HXLINE( 130)						return false;
            					}
            					else {
HXDLIN( 119)						if ((item2->_hx_getIndex() == 2)) {
HXLINE( 124)							 ::haxe::StackItem item11 = item1->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
HXDLIN( 124)							::String file1 = item1->_hx_getString(1);
HXDLIN( 124)							int line1 = item1->_hx_getInt(2);
HXDLIN( 124)							 ::Dynamic col1 = item1->_hx_getObject(3);
HXDLIN( 124)							 ::Dynamic col2 = item2->_hx_getObject(3);
HXDLIN( 124)							int line2 = item2->_hx_getInt(2);
HXDLIN( 124)							::String file2 = item2->_hx_getString(1);
HXDLIN( 124)							 ::haxe::StackItem item21 = item2->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
HXLINE( 125)							bool _hx_tmp;
HXDLIN( 125)							bool _hx_tmp1;
HXDLIN( 125)							if ((file1 == file2)) {
HXLINE( 125)								_hx_tmp1 = (line1 == line2);
            							}
            							else {
HXLINE( 125)								_hx_tmp1 = false;
            							}
HXDLIN( 125)							if (_hx_tmp1) {
HXLINE( 125)								_hx_tmp = ::hx::IsEq( col1,col2 );
            							}
            							else {
HXLINE( 125)								_hx_tmp = false;
            							}
HXDLIN( 125)							if (_hx_tmp) {
HXLINE( 125)								return ::haxe::_CallStack::CallStack_Impl__obj::equalItems(item11,item21);
            							}
            							else {
HXLINE( 125)								return false;
            							}
            						}
            						else {
HXLINE( 130)							return false;
            						}
            					}
            				}
            				break;
            				case (int)3: {
HXDLIN( 119)					if (::hx::IsNull( item2 )) {
HXLINE( 130)						return false;
            					}
            					else {
HXDLIN( 119)						if ((item2->_hx_getIndex() == 3)) {
HXLINE( 126)							::String class1 = item1->_hx_getString(0);
HXDLIN( 126)							::String method1 = item1->_hx_getString(1);
HXDLIN( 126)							::String method2 = item2->_hx_getString(1);
HXDLIN( 126)							::String class2 = item2->_hx_getString(0);
HXLINE( 127)							if ((class1 == class2)) {
HXLINE( 127)								return (method1 == method2);
            							}
            							else {
HXLINE( 127)								return false;
            							}
            						}
            						else {
HXLINE( 130)							return false;
            						}
            					}
            				}
            				break;
            				case (int)4: {
HXDLIN( 119)					if (::hx::IsNull( item2 )) {
HXLINE( 130)						return false;
            					}
            					else {
HXDLIN( 119)						if ((item2->_hx_getIndex() == 4)) {
HXLINE( 128)							 ::Dynamic v1 = item1->_hx_getObject(0);
HXDLIN( 128)							 ::Dynamic v2 = item2->_hx_getObject(0);
HXLINE( 129)							return ::hx::IsEq( v1,v2 );
            						}
            						else {
HXLINE( 130)							return false;
            						}
            					}
            				}
            				break;
            			}
            		}
HXLINE( 119)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CallStack_Impl__obj,equalItems,return )

::String CallStack_Impl__obj::exceptionToString( ::haxe::Exception e){
            	HX_STACKFRAME(&_hx_pos_b99d1ca1df6dde60_134_exceptionToString)
HXLINE( 135)		if (::hx::IsNull( e->get_previous() )) {
HXLINE( 136)			::String _hx_tmp = (HX_("Exception: ",95,cc,ac,54) + e->get_message());
HXDLIN( 136)			::Array< ::Dynamic> tmp = e->get_stack();
HXDLIN( 136)			::String _hx_tmp1;
HXDLIN( 136)			if (::hx::IsNull( tmp )) {
HXLINE( 136)				_hx_tmp1 = HX_("null",87,9e,0e,49);
            			}
            			else {
HXLINE( 136)				_hx_tmp1 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
            			}
HXDLIN( 136)			return (_hx_tmp + _hx_tmp1);
            		}
HXLINE( 138)		::String result = HX_("",00,00,00,00);
HXLINE( 139)		 ::haxe::Exception e1 = e;
HXLINE( 140)		 ::haxe::Exception prev = null();
HXLINE( 141)		while(::hx::IsNotNull( e1 )){
HXLINE( 142)			if (::hx::IsNull( prev )) {
HXLINE( 143)				::String result1 = (HX_("Exception: ",95,cc,ac,54) + e1->get_message());
HXDLIN( 143)				::Array< ::Dynamic> tmp = e1->get_stack();
HXDLIN( 143)				::String result2;
HXDLIN( 143)				if (::hx::IsNull( tmp )) {
HXLINE( 143)					result2 = HX_("null",87,9e,0e,49);
            				}
            				else {
HXLINE( 143)					result2 = ::haxe::_CallStack::CallStack_Impl__obj::toString(tmp);
            				}
HXDLIN( 143)				result = ((result1 + result2) + result);
            			}
            			else {
HXLINE( 145)				::Array< ::Dynamic> prevStack = e1->get_stack();
HXDLIN( 145)				::Array< ::Dynamic> prevStack1 = ::haxe::_CallStack::CallStack_Impl__obj::subtract(prevStack,prev->get_stack());
HXLINE( 146)				::String result1 = (HX_("Exception: ",95,cc,ac,54) + e1->get_message());
HXDLIN( 146)				::String result2;
HXDLIN( 146)				if (::hx::IsNull( prevStack1 )) {
HXLINE( 146)					result2 = HX_("null",87,9e,0e,49);
            				}
            				else {
HXLINE( 146)					result2 = ::haxe::_CallStack::CallStack_Impl__obj::toString(prevStack1);
            				}
HXDLIN( 146)				result = (((result1 + result2) + HX_("\n\nNext ",ed,7e,c7,cb)) + result);
            			}
HXLINE( 148)			prev = e1;
HXLINE( 149)			e1 = e1->get_previous();
            		}
HXLINE( 151)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CallStack_Impl__obj,exceptionToString,return )

void CallStack_Impl__obj::itemToString( ::StringBuf b, ::haxe::StackItem s){
            	HX_STACKFRAME(&_hx_pos_b99d1ca1df6dde60_155_itemToString)
HXDLIN( 155)		switch((int)(s->_hx_getIndex())){
            			case (int)0: {
HXLINE( 157)				if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 157)					b->flush();
            				}
HXDLIN( 157)				if (::hx::IsNull( b->b )) {
HXLINE( 157)					b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_16,1);
            				}
            				else {
HXLINE( 157)					b->b->push(HX_("a C function",f4,1b,53,cb));
            				}
            			}
            			break;
            			case (int)1: {
HXLINE( 158)				::String m = s->_hx_getString(0);
HXDLIN( 158)				{
HXLINE( 159)					{
HXLINE( 159)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 159)							b->flush();
            						}
HXDLIN( 159)						if (::hx::IsNull( b->b )) {
HXLINE( 159)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_17,1);
            						}
            						else {
HXLINE( 159)							b->b->push(HX_("module ",f4,e1,fa,f7));
            						}
            					}
HXLINE( 160)					{
HXLINE( 160)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 160)							b->flush();
            						}
HXDLIN( 160)						if (::hx::IsNull( b->b )) {
HXLINE( 160)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(m));
            						}
            						else {
HXLINE( 160)							::Array< ::String > b1 = b->b;
HXDLIN( 160)							b1->push(::Std_obj::string(m));
            						}
            					}
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 161)				 ::Dynamic col = s->_hx_getObject(3);
HXDLIN( 161)				int line = s->_hx_getInt(2);
HXDLIN( 161)				::String file = s->_hx_getString(1);
HXDLIN( 161)				 ::haxe::StackItem s1 = s->_hx_getObject(0).StaticCast<  ::haxe::StackItem >();
HXDLIN( 161)				{
HXLINE( 162)					if (::hx::IsNotNull( s1 )) {
HXLINE( 163)						::haxe::_CallStack::CallStack_Impl__obj::itemToString(b,s1);
HXLINE( 164)						{
HXLINE( 164)							if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 164)								b->flush();
            							}
HXDLIN( 164)							if (::hx::IsNull( b->b )) {
HXLINE( 164)								b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_18,1);
            							}
            							else {
HXLINE( 164)								b->b->push(HX_(" (",08,1c,00,00));
            							}
            						}
            					}
HXLINE( 166)					{
HXLINE( 166)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 166)							b->flush();
            						}
HXDLIN( 166)						if (::hx::IsNull( b->b )) {
HXLINE( 166)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(file));
            						}
            						else {
HXLINE( 166)							::Array< ::String > b1 = b->b;
HXDLIN( 166)							b1->push(::Std_obj::string(file));
            						}
            					}
HXLINE( 167)					{
HXLINE( 167)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 167)							b->flush();
            						}
HXDLIN( 167)						if (::hx::IsNull( b->b )) {
HXLINE( 167)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_19,1);
            						}
            						else {
HXLINE( 167)							b->b->push(HX_(" line ",8c,69,6d,40));
            						}
            					}
HXLINE( 168)					{
HXLINE( 168)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 168)							b->flush();
            						}
HXDLIN( 168)						if (::hx::IsNull( b->b )) {
HXLINE( 168)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(line));
            						}
            						else {
HXLINE( 168)							::Array< ::String > b1 = b->b;
HXDLIN( 168)							b1->push(::Std_obj::string(line));
            						}
            					}
HXLINE( 169)					if (::hx::IsNotNull( col )) {
HXLINE( 170)						{
HXLINE( 170)							if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 170)								b->flush();
            							}
HXDLIN( 170)							if (::hx::IsNull( b->b )) {
HXLINE( 170)								b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_20,1);
            							}
            							else {
HXLINE( 170)								b->b->push(HX_(" column ",6a,f0,a7,19));
            							}
            						}
HXLINE( 171)						{
HXLINE( 171)							if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 171)								b->flush();
            							}
HXDLIN( 171)							if (::hx::IsNull( b->b )) {
HXLINE( 171)								b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(col));
            							}
            							else {
HXLINE( 171)								::Array< ::String > b1 = b->b;
HXDLIN( 171)								b1->push(::Std_obj::string(col));
            							}
            						}
            					}
HXLINE( 173)					if (::hx::IsNotNull( s1 )) {
HXLINE( 174)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 174)							b->flush();
            						}
HXDLIN( 174)						if (::hx::IsNull( b->b )) {
HXLINE( 174)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_21,1);
            						}
            						else {
HXLINE( 174)							b->b->push(HX_(")",29,00,00,00));
            						}
            					}
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 175)				::String meth = s->_hx_getString(1);
HXDLIN( 175)				::String cname = s->_hx_getString(0);
HXDLIN( 175)				{
HXLINE( 176)					{
HXLINE( 176)						::String x;
HXDLIN( 176)						if (::hx::IsNull( cname )) {
HXLINE( 176)							x = HX_("<unknown>",b0,91,d8,da);
            						}
            						else {
HXLINE( 176)							x = cname;
            						}
HXDLIN( 176)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 176)							b->flush();
            						}
HXDLIN( 176)						if (::hx::IsNull( b->b )) {
HXLINE( 176)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            						}
            						else {
HXLINE( 176)							::Array< ::String > b1 = b->b;
HXDLIN( 176)							b1->push(::Std_obj::string(x));
            						}
            					}
HXLINE( 177)					{
HXLINE( 177)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 177)							b->flush();
            						}
HXDLIN( 177)						if (::hx::IsNull( b->b )) {
HXLINE( 177)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_22,1);
            						}
            						else {
HXLINE( 177)							b->b->push(HX_(".",2e,00,00,00));
            						}
            					}
HXLINE( 178)					{
HXLINE( 178)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 178)							b->flush();
            						}
HXDLIN( 178)						if (::hx::IsNull( b->b )) {
HXLINE( 178)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(meth));
            						}
            						else {
HXLINE( 178)							::Array< ::String > b1 = b->b;
HXDLIN( 178)							b1->push(::Std_obj::string(meth));
            						}
            					}
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 179)				 ::Dynamic n = s->_hx_getObject(0);
HXDLIN( 179)				{
HXLINE( 180)					{
HXLINE( 180)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 180)							b->flush();
            						}
HXDLIN( 180)						if (::hx::IsNull( b->b )) {
HXLINE( 180)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_baffa80f_23,1);
            						}
            						else {
HXLINE( 180)							b->b->push(HX_("local function #",b0,cd,97,ff));
            						}
            					}
HXLINE( 181)					{
HXLINE( 181)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 181)							b->flush();
            						}
HXDLIN( 181)						if (::hx::IsNull( b->b )) {
HXLINE( 181)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(n));
            						}
            						else {
HXLINE( 181)							::Array< ::String > b1 = b->b;
HXDLIN( 181)							b1->push(::Std_obj::string(n));
            						}
            					}
            				}
            			}
            			break;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(CallStack_Impl__obj,itemToString,(void))


CallStack_Impl__obj::CallStack_Impl__obj()
{
}

bool CallStack_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"copy") ) { outValue = copy_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"asArray") ) { outValue = asArray_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subtract") ) { outValue = subtract_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"callStack") ) { outValue = callStack_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"equalItems") ) { outValue = equalItems_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"itemToString") ) { outValue = itemToString_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"exceptionStack") ) { outValue = exceptionStack_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"exceptionToString") ) { outValue = exceptionToString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CallStack_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CallStack_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class CallStack_Impl__obj::__mClass;

static ::String CallStack_Impl__obj_sStaticFields[] = {
	HX_("get_length",af,04,8f,8f),
	HX_("callStack",ca,c1,4a,10),
	HX_("exceptionStack",79,48,56,0b),
	HX_("toString",ac,d0,6e,38),
	HX_("subtract",14,75,11,f8),
	HX_("copy",b5,bb,c4,41),
	HX_("get",96,80,4e,00),
	HX_("asArray",47,5b,69,75),
	HX_("equalItems",ac,df,65,63),
	HX_("exceptionToString",1b,04,ca,b4),
	HX_("itemToString",df,1c,98,1c),
	::String(null())
};

void CallStack_Impl__obj::__register()
{
	CallStack_Impl__obj _hx_dummy;
	CallStack_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe._CallStack.CallStack_Impl_",0f,a8,ff,ba);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CallStack_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CallStack_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< CallStack_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CallStack_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CallStack_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace _CallStack
