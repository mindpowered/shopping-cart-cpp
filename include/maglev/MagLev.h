// Generated by Haxe 4.1.1
#ifndef INCLUDED_maglev_MagLev
#define INCLUDED_maglev_MagLev

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(haxe,IMap)
HX_DECLARE_CLASS2(haxe,ds,StringMap)
HX_DECLARE_CLASS1(maglev,MagLev)
HX_DECLARE_CLASS1(maglev,MagLevAny)
HX_DECLARE_CLASS1(maglev,MagLevArray)
HX_DECLARE_CLASS1(maglev,MagLevFunction)
HX_DECLARE_CLASS1(maglev,MagLevResult)

namespace maglev{


class HXCPP_CLASS_ATTRIBUTES MagLev_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MagLev_obj OBJ_;
		MagLev_obj();

	public:
		enum { _hx_ClassId = 0x671c69d4 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="maglev.MagLev")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"maglev.MagLev"); }
		static ::hx::ObjectPtr< MagLev_obj > __new();
		static ::hx::ObjectPtr< MagLev_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MagLev_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MagLev",2a,0b,a8,e7); }

		static void __boot();
		static  ::haxe::ds::StringMap _instances;
		static  ::maglev::MagLev getInstance(::String key);
		static ::Dynamic getInstance_dyn();

		 ::haxe::ds::StringMap _methods;
		 ::haxe::ds::StringMap _listeners;
		void _hx_register(::String method, ::maglev::MagLevFunction callback);
		::Dynamic _hx_register_dyn();

		 ::maglev::MagLevResult call(::String method, ::maglev::MagLevArray args);
		::Dynamic call_dyn();

		void listen(::String event, ::maglev::MagLevFunction callback);
		::Dynamic listen_dyn();

		void emit(::String event, ::maglev::MagLevArray args);
		::Dynamic emit_dyn();

};

} // end namespace maglev

#endif /* INCLUDED_maglev_MagLev */ 
