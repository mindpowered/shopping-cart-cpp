// Generated by Haxe 4.1.1
#ifndef INCLUDED_maglev_Telemetry
#define INCLUDED_maglev_Telemetry

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(maglev,Telemetry)

namespace maglev{


class HXCPP_CLASS_ATTRIBUTES Telemetry_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Telemetry_obj OBJ_;
		Telemetry_obj();

	public:
		enum { _hx_ClassId = 0x7ff8fd8b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="maglev.Telemetry")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"maglev.Telemetry"); }
		static ::hx::ObjectPtr< Telemetry_obj > __new();
		static ::hx::ObjectPtr< Telemetry_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Telemetry_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Telemetry",59,36,ff,ba); }

		::Array< ::String > info;
		void addInfo(::Array< ::String > args);
		::Dynamic addInfo_dyn();

		void send(::Array< ::String > args);
		::Dynamic send_dyn();

};

} // end namespace maglev

#endif /* INCLUDED_maglev_Telemetry */ 
