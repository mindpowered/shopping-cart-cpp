// Generated by Haxe 4.1.1
#ifndef INCLUDED_maglev_MagLevResult
#define INCLUDED_maglev_MagLevResult

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(maglev,MagLevAny)
HX_DECLARE_CLASS1(maglev,MagLevError)
HX_DECLARE_CLASS1(maglev,MagLevResult)
HX_DECLARE_CLASS1(maglev,MagLevString)

namespace maglev{


class HXCPP_CLASS_ATTRIBUTES MagLevResult_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MagLevResult_obj OBJ_;
		MagLevResult_obj();

	public:
		enum { _hx_ClassId = 0x01e076c5 };

		void __construct(bool async);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="maglev.MagLevResult")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"maglev.MagLevResult"); }
		static ::hx::ObjectPtr< MagLevResult_obj > __new(bool async);
		static ::hx::ObjectPtr< MagLevResult_obj > __alloc(::hx::Ctx *_hx_ctx,bool async);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MagLevResult_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MagLevResult",a7,a3,60,91); }

		static  ::maglev::MagLevResult fromResult( ::maglev::MagLevAny res);
		static ::Dynamic fromResult_dyn();

		static  ::maglev::MagLevResult fromError( ::maglev::MagLevError err);
		static ::Dynamic fromError_dyn();

		static  ::maglev::MagLevResult createAsync();
		static ::Dynamic createAsync_dyn();

		static int getStaticType();
		static ::Dynamic getStaticType_dyn();

		 ::maglev::MagLevAny result;
		 ::maglev::MagLevError error;
		bool async;
		bool complete;
		::Array< ::Dynamic> accepts;
		::Array< ::Dynamic> rejects;
		bool isAsync();
		::Dynamic isAsync_dyn();

		bool isComplete();
		::Dynamic isComplete_dyn();

		bool isError();
		::Dynamic isError_dyn();

		 ::maglev::MagLevAny getResult();
		::Dynamic getResult_dyn();

		void setResult( ::maglev::MagLevAny res);
		::Dynamic setResult_dyn();

		 ::maglev::MagLevError getError();
		::Dynamic getError_dyn();

		void setError( ::maglev::MagLevError err);
		::Dynamic setError_dyn();

		 ::maglev::MagLevResult onResult( ::Dynamic callback);
		::Dynamic onResult_dyn();

		 ::maglev::MagLevResult onError( ::Dynamic callback);
		::Dynamic onError_dyn();

		int getType();
		::Dynamic getType_dyn();

		bool isEqual( ::maglev::MagLevResult other);
		::Dynamic isEqual_dyn();

		 ::maglev::MagLevString toJson();
		::Dynamic toJson_dyn();

};

} // end namespace maglev

#endif /* INCLUDED_maglev_MagLevResult */ 
