// Generated by Haxe 4.1.1
#ifndef INCLUDED_maglev_CppCallbackPtr
#define INCLUDED_maglev_CppCallbackPtr

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_cpp_Finalizable
#include <cpp/Finalizable.h>
#endif
#ifndef INCLUDED_f1f713c9e000f5d3
#define INCLUDED_f1f713c9e000f5d3
#include "array"
#endif
#ifndef INCLUDED_7625ac700f09f214
#define INCLUDED_7625ac700f09f214
#include "functional"
#endif
HX_DECLARE_CLASS1(cpp,Finalizable)
HX_DECLARE_CLASS1(maglev,CppAny)
HX_DECLARE_CLASS1(maglev,CppCallbackPtr)

namespace maglev{


class HXCPP_CLASS_ATTRIBUTES CppCallbackPtr_obj : public  ::cpp::Finalizable_obj
{
	public:
		typedef  ::cpp::Finalizable_obj super;
		typedef CppCallbackPtr_obj OBJ_;
		CppCallbackPtr_obj();

	public:
		enum { _hx_ClassId = 0x3f7e95f4 };

		void __construct(::cpp::Function<  ::maglev::CppAny  ( std::vector<CppAny>) > inFunc);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="maglev.CppCallbackPtr")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"maglev.CppCallbackPtr"); }
		static ::hx::ObjectPtr< CppCallbackPtr_obj > __new(::cpp::Function<  ::maglev::CppAny  ( std::vector<CppAny>) > inFunc);
		static ::hx::ObjectPtr< CppCallbackPtr_obj > __alloc(::hx::Ctx *_hx_ctx,::cpp::Function<  ::maglev::CppAny  ( std::vector<CppAny>) > inFunc);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~CppCallbackPtr_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("CppCallbackPtr",e6,70,59,ec); }

		::cpp::Pointer<  std::function<CppAny(std::vector<CppAny>)> > lambda;
		 ::maglev::CppAny call( std::vector<CppAny> args);

		void finalize();

		virtual ::String toString();
		::Dynamic toString_dyn();

};

} // end namespace maglev

#endif /* INCLUDED_maglev_CppCallbackPtr */ 
