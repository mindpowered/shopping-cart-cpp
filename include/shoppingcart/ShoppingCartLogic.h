// Generated by Haxe 4.1.1
#ifndef INCLUDED_shoppingcart_ShoppingCartLogic
#define INCLUDED_shoppingcart_ShoppingCartLogic

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(shoppingcart,CartRepository)
HX_DECLARE_CLASS1(shoppingcart,ItemRepository)
HX_DECLARE_CLASS1(shoppingcart,ShoppingCartLogic)

namespace shoppingcart{


class HXCPP_CLASS_ATTRIBUTES ShoppingCartLogic_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ShoppingCartLogic_obj OBJ_;
		ShoppingCartLogic_obj();

	public:
		enum { _hx_ClassId = 0x14398f5e };

		void __construct( ::shoppingcart::CartRepository cartRepo, ::shoppingcart::ItemRepository itemRepo);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="shoppingcart.ShoppingCartLogic")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"shoppingcart.ShoppingCartLogic"); }
		static ::hx::ObjectPtr< ShoppingCartLogic_obj > __new( ::shoppingcart::CartRepository cartRepo, ::shoppingcart::ItemRepository itemRepo);
		static ::hx::ObjectPtr< ShoppingCartLogic_obj > __alloc(::hx::Ctx *_hx_ctx, ::shoppingcart::CartRepository cartRepo, ::shoppingcart::ItemRepository itemRepo);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ShoppingCartLogic_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ShoppingCartLogic",b6,77,31,32); }

		 ::shoppingcart::CartRepository cartRepo;
		 ::shoppingcart::ItemRepository itemRepo;
		void Create(::String storeId, ::Dynamic callback);
		::Dynamic Create_dyn();

		void AddItem(::String cartId,::String itemId,int qty,Float price, ::Dynamic callback);
		::Dynamic AddItem_dyn();

		void ListItems(::String cartId, ::Dynamic callback);
		::Dynamic ListItems_dyn();

		void RemoveItem(::String cartId,int idx, ::Dynamic callback);
		::Dynamic RemoveItem_dyn();

		void UpdateQty(::String cartId,int idx,int qty, ::Dynamic callback);
		::Dynamic UpdateQty_dyn();

		void CountItems(::String cartId, ::Dynamic callback);
		::Dynamic CountItems_dyn();

		void GetCartSummary(::String cartId, ::Dynamic callback);
		::Dynamic GetCartSummary_dyn();

		void Clear(::String cartId, ::Dynamic callback);
		::Dynamic Clear_dyn();

};

} // end namespace shoppingcart

#endif /* INCLUDED_shoppingcart_ShoppingCartLogic */ 
